// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/spf13/afero (interfaces: Fs)

package local_test

import (
	pegomock "github.com/petergtz/pegomock"
	afero "github.com/spf13/afero"
	os "os"
	"reflect"
	time "time"
)

type MockFs struct {
	fail func(message string, callerSkip ...int)
}

func NewMockFs() *MockFs {
	return &MockFs{fail: pegomock.GlobalFailHandler}
}

func (mock *MockFs) Chmod(_param0 string, _param1 os.FileMode) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Chmod", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) Chtimes(_param0 string, _param1 time.Time, _param2 time.Time) error {
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Chtimes", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) Create(_param0 string) (afero.File, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Create", params, []reflect.Type{reflect.TypeOf((*afero.File)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 afero.File
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(afero.File)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFs) Mkdir(_param0 string, _param1 os.FileMode) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Mkdir", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) MkdirAll(_param0 string, _param1 os.FileMode) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("MkdirAll", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) Name() string {
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Name", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockFs) Open(_param0 string) (afero.File, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Open", params, []reflect.Type{reflect.TypeOf((*afero.File)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 afero.File
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(afero.File)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFs) OpenFile(_param0 string, _param1 int, _param2 os.FileMode) (afero.File, error) {
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("OpenFile", params, []reflect.Type{reflect.TypeOf((*afero.File)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 afero.File
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(afero.File)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFs) Remove(_param0 string) error {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Remove", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) RemoveAll(_param0 string) error {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RemoveAll", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) Rename(_param0 string, _param1 string) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Rename", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockFs) Stat(_param0 string) (os.FileInfo, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Stat", params, []reflect.Type{reflect.TypeOf((*os.FileInfo)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 os.FileInfo
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(os.FileInfo)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockFs) VerifyWasCalledOnce() *VerifierFs {
	return &VerifierFs{mock, pegomock.Times(1), nil}
}

func (mock *MockFs) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierFs {
	return &VerifierFs{mock, invocationCountMatcher, nil}
}

func (mock *MockFs) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierFs {
	return &VerifierFs{mock, invocationCountMatcher, inOrderContext}
}

type VerifierFs struct {
	mock                   *MockFs
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierFs) Chmod(_param0 string, _param1 os.FileMode) *Fs_Chmod_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Chmod", params)
	return &Fs_Chmod_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Chmod_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Chmod_OngoingVerification) GetCapturedArguments() (string, os.FileMode) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Fs_Chmod_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []os.FileMode) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]os.FileMode, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(os.FileMode)
		}
	}
	return
}

func (verifier *VerifierFs) Chtimes(_param0 string, _param1 time.Time, _param2 time.Time) *Fs_Chtimes_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Chtimes", params)
	return &Fs_Chtimes_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Chtimes_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Chtimes_OngoingVerification) GetCapturedArguments() (string, time.Time, time.Time) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Fs_Chtimes_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []time.Time, _param2 []time.Time) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]time.Time, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(time.Time)
		}
		_param2 = make([]time.Time, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(time.Time)
		}
	}
	return
}

func (verifier *VerifierFs) Create(_param0 string) *Fs_Create_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Create", params)
	return &Fs_Create_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Create_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Create_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fs_Create_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFs) Mkdir(_param0 string, _param1 os.FileMode) *Fs_Mkdir_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Mkdir", params)
	return &Fs_Mkdir_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Mkdir_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Mkdir_OngoingVerification) GetCapturedArguments() (string, os.FileMode) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Fs_Mkdir_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []os.FileMode) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]os.FileMode, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(os.FileMode)
		}
	}
	return
}

func (verifier *VerifierFs) MkdirAll(_param0 string, _param1 os.FileMode) *Fs_MkdirAll_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "MkdirAll", params)
	return &Fs_MkdirAll_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_MkdirAll_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_MkdirAll_OngoingVerification) GetCapturedArguments() (string, os.FileMode) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Fs_MkdirAll_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []os.FileMode) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]os.FileMode, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(os.FileMode)
		}
	}
	return
}

func (verifier *VerifierFs) Name() *Fs_Name_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Name", params)
	return &Fs_Name_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Name_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Name_OngoingVerification) GetCapturedArguments() {
}

func (c *Fs_Name_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierFs) Open(_param0 string) *Fs_Open_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Open", params)
	return &Fs_Open_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Open_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Open_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fs_Open_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFs) OpenFile(_param0 string, _param1 int, _param2 os.FileMode) *Fs_OpenFile_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "OpenFile", params)
	return &Fs_OpenFile_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_OpenFile_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_OpenFile_OngoingVerification) GetCapturedArguments() (string, int, os.FileMode) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Fs_OpenFile_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []int, _param2 []os.FileMode) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]int, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(int)
		}
		_param2 = make([]os.FileMode, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(os.FileMode)
		}
	}
	return
}

func (verifier *VerifierFs) Remove(_param0 string) *Fs_Remove_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Remove", params)
	return &Fs_Remove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Remove_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Remove_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fs_Remove_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFs) RemoveAll(_param0 string) *Fs_RemoveAll_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RemoveAll", params)
	return &Fs_RemoveAll_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_RemoveAll_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_RemoveAll_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fs_RemoveAll_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFs) Rename(_param0 string, _param1 string) *Fs_Rename_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Rename", params)
	return &Fs_Rename_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Rename_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Rename_OngoingVerification) GetCapturedArguments() (string, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Fs_Rename_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierFs) Stat(_param0 string) *Fs_Stat_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Stat", params)
	return &Fs_Stat_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Fs_Stat_OngoingVerification struct {
	mock              *MockFs
	methodInvocations []pegomock.MethodInvocation
}

func (c *Fs_Stat_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Fs_Stat_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

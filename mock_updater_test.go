// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/petergtz/bitsgo (interfaces: Updater)

package bitsgo_test

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockUpdater struct {
	fail func(message string, callerSkip ...int)
}

func NewMockUpdater() *MockUpdater {
	return &MockUpdater{fail: pegomock.GlobalFailHandler}
}

func (mock *MockUpdater) NotifyProcessingUpload(_param0 string) error {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NotifyProcessingUpload", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockUpdater) NotifyUploadFailed(_param0 string, _param1 error) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NotifyUploadFailed", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockUpdater) NotifyUploadSucceeded(_param0 string, _param1 string, _param2 string) error {
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("NotifyUploadSucceeded", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockUpdater) VerifyWasCalledOnce() *VerifierUpdater {
	return &VerifierUpdater{mock, pegomock.Times(1), nil}
}

func (mock *MockUpdater) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierUpdater {
	return &VerifierUpdater{mock, invocationCountMatcher, nil}
}

func (mock *MockUpdater) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierUpdater {
	return &VerifierUpdater{mock, invocationCountMatcher, inOrderContext}
}

type VerifierUpdater struct {
	mock                   *MockUpdater
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierUpdater) NotifyProcessingUpload(_param0 string) *Updater_NotifyProcessingUpload_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NotifyProcessingUpload", params)
	return &Updater_NotifyProcessingUpload_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Updater_NotifyProcessingUpload_OngoingVerification struct {
	mock              *MockUpdater
	methodInvocations []pegomock.MethodInvocation
}

func (c *Updater_NotifyProcessingUpload_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Updater_NotifyProcessingUpload_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierUpdater) NotifyUploadFailed(_param0 string, _param1 error) *Updater_NotifyUploadFailed_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NotifyUploadFailed", params)
	return &Updater_NotifyUploadFailed_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Updater_NotifyUploadFailed_OngoingVerification struct {
	mock              *MockUpdater
	methodInvocations []pegomock.MethodInvocation
}

func (c *Updater_NotifyUploadFailed_OngoingVerification) GetCapturedArguments() (string, error) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Updater_NotifyUploadFailed_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []error) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]error, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(error)
		}
	}
	return
}

func (verifier *VerifierUpdater) NotifyUploadSucceeded(_param0 string, _param1 string, _param2 string) *Updater_NotifyUploadSucceeded_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "NotifyUploadSucceeded", params)
	return &Updater_NotifyUploadSucceeded_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Updater_NotifyUploadSucceeded_OngoingVerification struct {
	mock              *MockUpdater
	methodInvocations []pegomock.MethodInvocation
}

func (c *Updater_NotifyUploadSucceeded_OngoingVerification) GetCapturedArguments() (string, string, string) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *Updater_NotifyUploadSucceeded_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]string, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(string)
		}
	}
	return
}
